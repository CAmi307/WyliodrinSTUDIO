(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[29],{

/***/ 506:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setup", function() { return setup; });
/* harmony import */ var xml_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(507);
/* harmony import */ var xml_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xml_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var raw_loader_visual_toolbox_xml__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(520);



let studio = null;


let blocks = __webpack_require__ (521);
let code = __webpack_require__ (522);

function setup (options, imports, register)
{
	studio = imports;

	let toolbox = xml_js__WEBPACK_IMPORTED_MODULE_0___default.a.xml2js (raw_loader_visual_toolbox_xml__WEBPACK_IMPORTED_MODULE_1__["default"]);

	
	studio.projects.registerLanguagePackage ('python', null, [
		{
			name: 'Adafruit_DHT',
			description: 'Python library to read the DHT series of humidity and temperature sensors on a Raspberry Pi or Beaglebone Black.'
		}
	]);

	studio.editor_visual.registerBlocksDefinitions ('adafruitdht', blocks, code, toolbox, {
		type: 'wyapp',
		board: ['raspberrypi', 'beagleboneblack'],
		visible ()
		{
			let device = studio.workspace.getDevice ();
			if (!device.properties.wyliolab) return true;
			else return false;
		}
	});

	register (null, {});
}

/***/ }),

/***/ 520:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<toolbox>\n    <category name=\"DHT Sensor\" colour=\"120\">\n        <block type=\"variables_set\">\n            <field name=\"VAR\">Temp</field>\n            <value name=\"VALUE\">\n                <block type=\"adafruit_dht_sensor_temperature\">\n                    <value name=\"pin\">\n                        <block type=\"math_number\"/>\n                    </value>\n                </block>\n            </value>\n        </block> \n        <block type=\"variables_set\">\n            <field name=\"VAR\">Hum</field>\n            <value name=\"VALUE\">\n                <block type=\"adafruit_dht_sensor_humidity\">\n                    <value name=\"pin\">\n                        <block type=\"math_number\"/>\n                    </value>\n                </block>\n            </value>\n        </block> \n    </category>\n    <sep />\n</toolbox>");

/***/ }),

/***/ 521:
/***/ (function(module, exports) {

// DO NOT EDIT THIS FILE, IT IS AUTMATICALLY GENERATED

module.exports = function (blockly) {
	var Blockly = blockly.Blockly;
	// var goog = blockly.goog;

	Blockly.Blocks['adafruit_dht_sensor_humidity'] = {
		init: function() {
			this.appendValueInput('pin')
				.appendField(new Blockly.FieldDropdown([
					['DHT 11', 'Adafruit_DHT.DHT11'],
					['DHT 22', 'Adafruit_DHT.DHT22'],
					['AM 2302', 'Adafruit_DHT.AM2302'],
				]), 'sensor')
				.setCheck(['String', 'Number'])
				.appendField('Temperature sensor');
			this.setOutput(true, 'Number');
			this.setColour(120);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

	Blockly.Blocks['adafruit_dht_sensor_temperature'] = {
		init: function() {
			this.appendValueInput('pin')
				.appendField(new Blockly.FieldDropdown([
					['DHT 11', 'Adafruit_DHT.DHT11'],
					['DHT 22', 'Adafruit_DHT.DHT22'],
					['AM 2302', 'Adafruit_DHT.AM2302'],
				]), 'sensor')
				.setCheck(['String', 'Number'])
				.appendField('Humidity sensor');
			this.setOutput(true, 'Number');
			this.setColour(120);
			this.setTooltip('');
			this.setHelpUrl('');
		}
	};

};

/***/ }),

/***/ 522:
/***/ (function(module, exports) {

// DO NOT EDIT THIS FILE, IT IS AUTMATICALLY GENERATED

module.exports = function (blockly) {
	var Blockly = blockly.Blockly;
	// var goog = blockly.goog;

	Blockly.Python.adafruit_dht_setup = function () {
		if (!Blockly.Python.definitions_['adafruit_dht_setup']) {
			Blockly.Python.definitions_['adafruit_dht_setup'] = 'import Adafruit_DHT \n';
		}
	};

	Blockly.Python['adafruit_dht_sensor_humidity'] = function (block) {
		Blockly.Python.adafruit_dht_setup ();
		var dropdown_sensor = block.getFieldValue('sensor');
		var value_pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_ATOMIC);
		// TODO: Assemble Python into code variable.
		var code = '(Adafruit_DHT.read_retry(' + dropdown_sensor.toString() + ', ' + value_pin.toString() + ')[0])';
		return [code, Blockly.Python.ORDER_NONE];
	};


	//TODO CHANGE TEMP
	Blockly.Python['adafruit_dht_sensor_temperature'] = function (block) {
		Blockly.Python.adafruit_dht_setup ();
		var dropdown_sensor = block.getFieldValue('sensor');
		var value_pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_ATOMIC);
		// TODO: Assemble Python into code variable.
		var code = '(Adafruit_DHT.read_retry(' + dropdown_sensor.toString() + ', ' + value_pin.toString() + ')[1])';
		return [code, Blockly.Python.ORDER_NONE];
	};
};

/***/ })

}]);